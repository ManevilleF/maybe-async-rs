* Maybe-Async Procedure Macro

  Unifying async and sync library implementation.

  Reference: [[https://github.com/dtolnay/async-trait][async-trait]]

  #+begin_src rust
    #[maybe_async]
    trait A{
        async fn async_fn_name()->Result<(),()> {}
        fn sync_fn_name() ->Result<(),()>{}
    }

    struct Foo;

    #[maybe_async]
    impl A for Foo{
        async fn async_fn_name()->Result<(),()>{
        }
        fn sync_fn_name() ->Result<(),()>{}
    }

    #[maybe_async]
    async fn maybe_async_fn()->Result<(),()>{
        #[maybe_async(async_fn_name)]
        let a = Foo::async_fn_name()?;

        let b = Foo::sync_fn_name()?;
        Ok(())
    }
  #+end_src

  When ~maybe-async~ feature gate ~is_sync~ is *NOT* set, the generated code is async
  code:

  #+begin_src rust
    #[async_trait]
    trait A{
        async fn maybe_async_fn_name() ->Result<(),()>{}
        fn sync_fn_name() ->Result<(),()>{}
    }

    struct Foo;

    #[async_trait]
    impl A for Foo{
        async fn maybe_async_fn_name() ->Result<(),()>{
        }
        fn sync_fn_name() ->Result<(),()>{}
    }

    async fn maybe_async_fn()->Result<(),()>{
        let a = Foo::maybe_async_fn_name().await?;
        let b = Foo::sync_fn_name()?;
        Ok(())
    }
  #+end_src

  When ~maybe-async~ feature gate ~is_sync~ is set, all async keyword is
  ignored and yields a sync version code:

  #+begin_src rust
    trait A {
        fn maybe_async_fn_name() ->Result<(),()>{}
        fn sync_fn_name()->Result<(),()> {}
    }

    struct Foo;

    impl A for Foo {
       fn maybe_async_fn_name()->Result<(),()>{}
       fn sync_fn_name() ->Result<(),()>{}
    }

    fn maybe_async_fn()->Result<(),()>{
        let a = Foo::maybe_async_fn_name()?;
        let b = Foo::sync_fn_name()?;
        Ok(())
    }
  #+end_src

